{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./appointment.service\";\nclass AuthService {\n  constructor(http, appointmentService) {\n    this.http = http;\n    this.appointmentService = appointmentService;\n    // private loggedInSubject: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    this.loggedInDoctor = null;\n    this.userIdSubject = new Subject();\n    this.authChange = new EventEmitter(); // Add EventEmitter\n    this._isLoggedIn = false;\n    this.USER_ROLE_KEY = 'userRole';\n    this.token = localStorage.getItem('token');\n    this._isLoggedIn = this.token !== null;\n    this.userId = localStorage.getItem('userId');\n  }\n  getUserRole() {\n    return localStorage.getItem(this.USER_ROLE_KEY);\n  }\n  setUserRole(role) {\n    localStorage.setItem(this.USER_ROLE_KEY, role);\n  }\n  clearUserRole() {\n    localStorage.removeItem(this.USER_ROLE_KEY);\n  }\n  setUserId(userId) {\n    this.userId = userId;\n    localStorage.setItem('userId', userId);\n  }\n  // Method to subscribe to userId changes\n  subscribeToUserIdChanges() {\n    return this.userIdSubject.asObservable();\n  }\n  getUserId() {\n    return this.userId;\n  }\n  isLoggedIn() {\n    // Check if the user ID is set to determine the logged-in state\n    return !!this.userId;\n  }\n  getToken() {\n    return this.token;\n  }\n  setToken(token) {\n    this.token = token;\n    localStorage.setItem('token', token);\n    this._isLoggedIn = true;\n  }\n  clearToken() {\n    this.token = null;\n    localStorage.removeItem('token');\n    this._isLoggedIn = false;\n  }\n  register(user) {\n    return this.http.post('http://localhost:3000/authRoutes/register', user);\n  }\n  // login(credentials: any,doctor: Doctor): Observable<any> {\n  //   this.loggedInDoctor = doctor;\n  //   return this.http.post<any>('http://localhost:3000/authRoutes/login', credentials);\n  // }\n  login(credential, doctor, role) {\n    this.authChange.emit(true); // Emit event when user logs in\n    this.loggedInDoctor = doctor;\n    return this.http.post('http://localhost:3000/authRoutes/login', credential).pipe(tap(res => {\n      this.setToken(res.token);\n      this.setUserId(res.userId);\n      this.setUserRole(role); // Set the role in localStorage\n      this.authChange.next(true);\n    }));\n  }\n  // setLoggedIn(value: boolean): void {\n  //   this.loggedInSubject.next(value);\n  // }\n  // isLoggedIn(): boolean {\n  //   return !!this.loggedInSubject.value;\n  // }\n  logout() {\n    this.token = null;\n    localStorage.removeItem('token');\n    this._isLoggedIn = false;\n    localStorage.removeItem('userId');\n    this.userId = null;\n    this.authChange.next(false);\n    // Perform any necessary logout actions\n    // this.setLoggedIn(false);\n  }\n\n  getRole() {\n    return localStorage.getItem('role');\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AppointmentService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"names":["EventEmitter","Subject","tap","AuthService","constructor","http","appointmentService","loggedInDoctor","userIdSubject","authChange","_isLoggedIn","USER_ROLE_KEY","token","localStorage","getItem","userId","getUserRole","setUserRole","role","setItem","clearUserRole","removeItem","setUserId","subscribeToUserIdChanges","asObservable","getUserId","isLoggedIn","getToken","setToken","clearToken","register","user","post","login","credential","doctor","emit","pipe","res","next","logout","getRole","i0","ɵɵinject","i1","HttpClient","i2","AppointmentService","factory","ɵfac","providedIn"],"sources":["D:\\alpha-projection\\hospital-management-system\\hms\\client\\src\\app\\auth.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject, Subject, tap } from 'rxjs';\r\nimport { Doctor } from './appointment-booking/appointment-booking.component';\r\nimport { AppointmentService } from './appointment.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  // private loggedInSubject: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\r\n  private loggedInDoctor: Doctor | null = null;\r\n  private userIdSubject: Subject<string | null> = new Subject<string | null>();\r\n  authChange: EventEmitter<boolean> = new EventEmitter<boolean>(); // Add EventEmitter\r\n\r\n  private token: string | null;\r\n  private _isLoggedIn = false;\r\n  private userId: string | null;\r\n  private readonly USER_ROLE_KEY = 'userRole';\r\n\r\n\r\n  constructor(private http: HttpClient,private appointmentService:AppointmentService) {\r\n    this.token = localStorage.getItem('token');\r\n    this._isLoggedIn = this.token !== null;\r\n    this.userId = localStorage.getItem('userId');\r\n   }\r\n\r\n   getUserRole(): string | null {\r\n    return localStorage.getItem(this.USER_ROLE_KEY);\r\n  }\r\n\r\n  setUserRole(role: string): void {\r\n    localStorage.setItem(this.USER_ROLE_KEY, role);\r\n  }\r\n\r\n  clearUserRole(): void {\r\n    localStorage.removeItem(this.USER_ROLE_KEY);\r\n  }\r\n\r\n\r\n  setUserId(userId: string): void {\r\n    this.userId = userId;\r\n    localStorage.setItem('userId', userId);\r\n  }\r\n\r\n\r\n  // Method to subscribe to userId changes\r\n  subscribeToUserIdChanges(): Observable<string | null> {\r\n    return this.userIdSubject.asObservable();\r\n  }\r\n\r\n  getUserId(): string | null {\r\n    return this.userId;\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    // Check if the user ID is set to determine the logged-in state\r\n    return !!this.userId;\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return this.token;\r\n  }\r\n\r\n\r\n  setToken(token: string) {\r\n    this.token = token;\r\n    localStorage.setItem('token', token);\r\n    this._isLoggedIn = true;\r\n  }\r\n\r\n  clearToken(): void {\r\n    this.token = null;\r\n    localStorage.removeItem('token');\r\n    this._isLoggedIn = false;\r\n  }\r\n\r\n  register(user: any): Observable<any> {\r\n    return this.http.post<any>('http://localhost:3000/authRoutes/register', user);\r\n  }\r\n\r\n  // login(credentials: any,doctor: Doctor): Observable<any> {\r\n  //   this.loggedInDoctor = doctor;\r\n  //   return this.http.post<any>('http://localhost:3000/authRoutes/login', credentials);\r\n  // }\r\n\r\n  login(credential: any, doctor: Doctor, role: string): Observable<any> {\r\n    this.authChange.emit(true); // Emit event when user logs in\r\n    this.loggedInDoctor = doctor;\r\n    return this.http\r\n      .post<{ token: string; userId: string }>('http://localhost:3000/authRoutes/login', credential)\r\n      .pipe(\r\n        tap((res) => {\r\n          this.setToken(res.token);\r\n          this.setUserId(res.userId);\r\n          this.setUserRole(role); // Set the role in localStorage\r\n          this.authChange.next(true);\r\n        })\r\n      );\r\n  }\r\n\r\n\r\n  // setLoggedIn(value: boolean): void {\r\n  //   this.loggedInSubject.next(value);\r\n  // }\r\n\r\n  // isLoggedIn(): boolean {\r\n  //   return !!this.loggedInSubject.value;\r\n  // }\r\n\r\n\r\n\r\n  logout(): void {\r\n    this.token = null;\r\n    localStorage.removeItem('token');\r\n    this._isLoggedIn = false;\r\n    localStorage.removeItem('userId');\r\n    this.userId = null;\r\n    this.authChange.next(false);\r\n    // Perform any necessary logout actions\r\n    // this.setLoggedIn(false);\r\n  }\r\n\r\n\r\n  getRole(): string | null {\r\n    return localStorage.getItem('role');\r\n  }\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}