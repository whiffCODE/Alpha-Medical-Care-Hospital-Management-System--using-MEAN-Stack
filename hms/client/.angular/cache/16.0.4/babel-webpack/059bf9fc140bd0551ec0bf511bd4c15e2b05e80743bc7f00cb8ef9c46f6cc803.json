{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../prescription.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction PrescriptionFormComponent_option_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const patient_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", patient_r2._id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(patient_r2.name);\n  }\n}\nfunction PrescriptionFormComponent_option_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const doctor_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", doctor_r3._id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(doctor_r3.name);\n  }\n}\nclass PrescriptionFormComponent {\n  constructor(prescriptionService) {\n    this.prescriptionService = prescriptionService;\n    this.patients = [];\n    this.doctors = [];\n  }\n  ngOnInit() {\n    this.getPatients();\n    this.getDoctors();\n  }\n  getPatients() {\n    this.prescriptionService.getPatients().subscribe(patients => {\n      this.patients = patients;\n    }, error => {\n      console.error('Failed to fetch patients:', error);\n    });\n  }\n  getDoctors() {\n    this.prescriptionService.getDoctors().subscribe(doctors => {\n      this.doctors = doctors;\n    }, error => {\n      console.error('Failed to fetch doctors:', error);\n    });\n  }\n  createPrescription() {\n    const prescriptionData = {\n      patient: this.selectedPatient,\n      doctor: this.selectedDoctor,\n      medication: this.medication,\n      dosage: this.dosage\n    };\n    this.prescriptionService.createPrescription(prescriptionData).subscribe(prescription => {\n      // Handle successful creation of prescription\n      alert('Prescription created');\n      console.log('Prescription created:', prescription);\n      // Reset form fields\n      this.selectedPatient = '';\n      this.selectedDoctor = '';\n      this.medication = '';\n      this.dosage = '';\n    }, error => {\n      // Handle error\n      console.error('Failed to create prescription:', error);\n    });\n  }\n}\nPrescriptionFormComponent.ɵfac = function PrescriptionFormComponent_Factory(t) {\n  return new (t || PrescriptionFormComponent)(i0.ɵɵdirectiveInject(i1.PrescriptionService));\n};\nPrescriptionFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PrescriptionFormComponent,\n  selectors: [[\"app-prescription-form\"]],\n  decls: 23,\n  vars: 6,\n  consts: [[3, \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"patient\"], [\"id\", \"patient\", \"name\", \"patient\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"doctor\"], [\"id\", \"doctor\", \"name\", \"doctor\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"medication\"], [\"type\", \"text\", \"id\", \"medication\", \"name\", \"medication\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"dosage\"], [\"type\", \"text\", \"id\", \"dosage\", \"name\", \"dosage\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [3, \"value\"]],\n  template: function PrescriptionFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Create Prescription\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function PrescriptionFormComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.createPrescription();\n      });\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"label\", 2);\n      i0.ɵɵtext(5, \"Patient:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"select\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function PrescriptionFormComponent_Template_select_ngModelChange_6_listener($event) {\n        return ctx.selectedPatient = $event;\n      });\n      i0.ɵɵtemplate(7, PrescriptionFormComponent_option_7_Template, 2, 2, \"option\", 4);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"div\", 1)(9, \"label\", 5);\n      i0.ɵɵtext(10, \"Doctor:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"select\", 6);\n      i0.ɵɵlistener(\"ngModelChange\", function PrescriptionFormComponent_Template_select_ngModelChange_11_listener($event) {\n        return ctx.selectedDoctor = $event;\n      });\n      i0.ɵɵtemplate(12, PrescriptionFormComponent_option_12_Template, 2, 2, \"option\", 4);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"div\", 1)(14, \"label\", 7);\n      i0.ɵɵtext(15, \"Medication:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"input\", 8);\n      i0.ɵɵlistener(\"ngModelChange\", function PrescriptionFormComponent_Template_input_ngModelChange_16_listener($event) {\n        return ctx.medication = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(17, \"div\", 1)(18, \"label\", 9);\n      i0.ɵɵtext(19, \"Dosage:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"input\", 10);\n      i0.ɵɵlistener(\"ngModelChange\", function PrescriptionFormComponent_Template_input_ngModelChange_20_listener($event) {\n        return ctx.dosage = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(21, \"button\", 11);\n      i0.ɵɵtext(22, \"Create Prescription\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngModel\", ctx.selectedPatient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.patients);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.selectedDoctor);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.doctors);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.medication);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.dosage);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.ɵNgNoValidate, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgModel, i3.NgForm],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { PrescriptionFormComponent };","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","patient_r2","_id","ɵɵadvance","ɵɵtextInterpolate","name","doctor_r3","PrescriptionFormComponent","constructor","prescriptionService","patients","doctors","ngOnInit","getPatients","getDoctors","subscribe","error","console","createPrescription","prescriptionData","patient","selectedPatient","doctor","selectedDoctor","medication","dosage","prescription","alert","log","ɵɵdirectiveInject","i1","PrescriptionService","selectors","decls","vars","consts","template","PrescriptionFormComponent_Template","rf","ctx","ɵɵlistener","PrescriptionFormComponent_Template_form_ngSubmit_2_listener","PrescriptionFormComponent_Template_select_ngModelChange_6_listener","$event","ɵɵtemplate","PrescriptionFormComponent_option_7_Template","PrescriptionFormComponent_Template_select_ngModelChange_11_listener","PrescriptionFormComponent_option_12_Template","PrescriptionFormComponent_Template_input_ngModelChange_16_listener","PrescriptionFormComponent_Template_input_ngModelChange_20_listener"],"sources":["D:\\alpha-projection\\hospital-management-system\\hms\\client\\src\\app\\prescription-form\\prescription-form.component.ts","D:\\alpha-projection\\hospital-management-system\\hms\\client\\src\\app\\prescription-form\\prescription-form.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { PrescriptionService } from '../prescription.service';\r\nimport { Patient } from '../Patient';\r\nimport { Doctor } from '../Doctor';\r\n\r\n\r\n\r\n\r\nexport interface Prescription {\r\n  id: number;\r\n  patient: string; // Assuming it represents the patient's name or ID\r\n  doctor: string; // Assuming it represents the doctor's name or ID\r\n  medication: string;\r\n  dosage: string;\r\n  createdAt: Date;\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-prescription-form',\r\n  templateUrl: './prescription-form.component.html',\r\n  styleUrls: ['./prescription-form.component.css']\r\n})\r\nexport class PrescriptionFormComponent implements OnInit {\r\n  patients: Patient[] = [];\r\n  doctors: Doctor[] = [];\r\n  selectedPatient: string;\r\n  selectedDoctor: string;\r\n  medication: string;\r\n  dosage: string;\r\n\r\n  constructor(private prescriptionService: PrescriptionService) {}\r\n\r\n  ngOnInit() {\r\n    this.getPatients();\r\n    this.getDoctors();\r\n  }\r\n\r\n  getPatients() {\r\n    this.prescriptionService.getPatients()\r\n      .subscribe(\r\n        patients => {\r\n          this.patients = patients;\r\n        },\r\n        error => {\r\n          console.error('Failed to fetch patients:', error);\r\n        }\r\n      );\r\n  }\r\n\r\n  getDoctors() {\r\n    this.prescriptionService.getDoctors()\r\n      .subscribe(\r\n        doctors => {\r\n          this.doctors = doctors;\r\n        },\r\n        error => {\r\n          console.error('Failed to fetch doctors:', error);\r\n        }\r\n      );\r\n  }\r\n\r\n  createPrescription(): void {\r\n    const prescriptionData = {\r\n      patient: this.selectedPatient,\r\n      doctor: this.selectedDoctor,\r\n      medication: this.medication,\r\n      dosage: this.dosage\r\n    };\r\n\r\n    this.prescriptionService.createPrescription(prescriptionData)\r\n      .subscribe(\r\n        prescription => {\r\n          // Handle successful creation of prescription\r\n          alert('Prescription created');\r\n          console.log('Prescription created:', prescription);\r\n            // Reset form fields\r\n        this.selectedPatient = '';\r\n        this.selectedDoctor = '';\r\n        this.medication = '';\r\n        this.dosage = '';\r\n        },\r\n        error => {\r\n          // Handle error\r\n          console.error('Failed to create prescription:', error);\r\n        }\r\n      );\r\n  }\r\n}\r\n","<h2>Create Prescription</h2>\r\n\r\n<form (ngSubmit)=\"createPrescription()\">\r\n  <div class=\"form-group\">\r\n    <label for=\"patient\">Patient:</label>\r\n    <select class=\"form-control\" id=\"patient\" [(ngModel)]=\"selectedPatient\" name=\"patient\">\r\n      <option *ngFor=\"let patient of patients\" [value]=\"patient._id\">{{ patient.name }}</option>\r\n    </select>\r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <label for=\"doctor\">Doctor:</label>\r\n    <select class=\"form-control\" id=\"doctor\" [(ngModel)]=\"selectedDoctor\" name=\"doctor\">\r\n      <option *ngFor=\"let doctor of doctors\" [value]=\"doctor._id\">{{ doctor.name }}</option>\r\n    </select>\r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <label for=\"medication\">Medication:</label>\r\n    <input type=\"text\" class=\"form-control\" id=\"medication\" [(ngModel)]=\"medication\" name=\"medication\">\r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <label for=\"dosage\">Dosage:</label>\r\n    <input type=\"text\" class=\"form-control\" id=\"dosage\" [(ngModel)]=\"dosage\" name=\"dosage\">\r\n  </div>\r\n\r\n  <button type=\"submit\" class=\"btn btn-primary\">Create Prescription</button>\r\n</form>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}